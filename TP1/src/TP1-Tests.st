TestCase subclass: #AlgoFixTest	instanceVariableNames: 'precision'	classVariableNames: ''	package: 'TP1-Tests'!!AlgoFixTest methodsFor: 'running' stamp: 'tomas 5/12/2020 16:14'!setUp	precision := 0.001! !!AlgoFixTest methodsFor: 'tests' stamp: 'tomas 5/12/2020 17:20'!test02PresupuestoPintoresUtilizandoPincelConPinturaAlbaOfreceElMenorPresupuesto	| algoFix alba presupuesto valorEsperado |	algoFix := AlgoFix new.	"Tecnica pincel: 		- Se tarda '2' horas en pintar un M2 (metro cuadrado), 	"	"Consumo de material:		- Para pincel cada M2 lleva '4' litros de pintura	"		"Pinturas:		- Alba   requiere '1' mano  con pincel y '1' mano rodillo	"	algoFix registrarPintorDePincel: 'Diego' conValorHora: 500.	algoFix registrarPintorDePincel: 'Eugenio' conValorHora: 450.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 150 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 10 conPintura: alba.	valorEsperado := algoFix  		manoDeObra: 			(10 "M2" * 2 "horas" * 450 "Precio" * 1 "manos") 		masMateriales: 			(10 "M2" * 4 "litros" * 150 "Precio" * 1 "manos").	self assert: 'Eugenio' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTest methodsFor: 'tests' stamp: 'tomas 5/12/2020 17:21'!test06PresupuestoPinteoresConPincelUtilizanDiferentesPinturasOfreceElMenorPresupuesto	| algoFix venier presupuesto valorEsperadoConVenier |	algoFix := AlgoFix new.	"Tecnica pincel: 		- Se tarda '2' horas en pintar un M2 (metro cuadrado), 	"	"Tecnica rodillo:		- Se tarda '1' horas en pintar un M2, 	"	"Consumo de material:		- Para pincel cada M2 lleva '4' litros de pintura		- Para rodillo cada M2 lleval '5 litros de pintura 	"	"Pinturas:		- Alba   requiere '1' mano  con pincel y '1' mano rodillo		- Venier requiere '2' manos con pincel y '1' con rodillo	"	algoFix registrarPintorDePincel: 'Martin' conValorHora: 500.	algoFix registrarPintorDePincel: 'Sebastian' conValorHora: 600.	venier := algoFix crearPintura: 'Venier' conPrecioPorLitro: 150 manosPincel: 2 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 15 conPintura: venier.		valorEsperadoConVenier := algoFix 		manoDeObra: 			(15 "M2" * 2 "horas" * 500 "Precio" * 2 "manos") 		masMateriales: 			(15 "M2" * 4 "litros" * 150 "Precio" * 2 "manos").	self assert: 'Martin' equals: (presupuesto responsable).	self assert: valorEsperadoConVenier closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTest methodsFor: 'tests' stamp: 'tomas 5/12/2020 17:23'!test08PresupuestoConTecnicaPincel	| algoFix alba venier presupuesto valorEsperadoConAlba valorEsperadoConVenier |	algoFix := AlgoFix new.	"Tecnica pincel: 		- Se tarda '2' horas en pintar un M2 (metro cuadrado), 	"	"Tecnica rodillo:		- Se tarda '1' horas en pintar un M2, 	"	"Consumo de material:		- Para pincel cada M2 lleva '4' litros de pintura		- Para rodillo cada M2 lleval '5 litros de pintura 	"	"Pinturas:		- Alba   requiere '1' mano  con pincel y '1' mano rodillo		- Venier requiere '2' manos con pincel y '1' con rodillo	"	algoFix registrarPintorDePincel: 'Edson' conValorHora: 500.	algoFix registrarPintorDeRodillo: 'Edson' conValorHora: 200.	algoFix registrarPintorDeRodillo: 'Pablo' conValorHora: 800.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 200 manosPincel: 1 manosRodillo: 1.	venier := algoFix crearPintura: 'Venier' conPrecioPorLitro: 150 manosPincel: 2 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperadoConAlba := algoFix 		manoDeObra: 			(5 "M2" * 1 "horas" * 200 "Precio" * 1 "manos") 		masMateriales: 			(5 "M2" * 5 "litros" * 200 "Precio" * 1 "manos").	self assert: 'Edson' equals: (presupuesto responsable).	self assert: valorEsperadoConAlba closeTo: (presupuesto valor) precision: precision.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: venier.	valorEsperadoConVenier := algoFix 		manoDeObra: 			(5 "M2" * 1 "horas" * 200 "Precio" * 1 "manos") 		masMateriales: 			(5 "M2" * 5 "litros" * 150 "Precio" * 1 "manos").	self assert: 'Edson' equals: (presupuesto responsable).	self assert: valorEsperadoConVenier closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTest methodsFor: 'tests' stamp: 'tomas 5/12/2020 17:24'!test07PresupuestoPinteoresConPincelUtilizanDiferentesPinturasHacenDescuendoDel50PorcientoEnMoCuandoM2EsMayor40EntoncesOfreceElMenorPresupuesto	| algoFix venier presupuesto valorEsperadoConAlba |	algoFix := AlgoFix new.	"Tecnica pincel: 		- Se tarda '2' horas en pintar un M2 (metro cuadrado), 	"	"Tecnica rodillo:		- Se tarda '1' horas en pintar un M2, 	"	"Consumo de material:		- Para pincel cada M2 lleva '4' litros de pintura		- Para rodillo cada M2 lleval '5 litros de pintura 	"	"Pinturas:		- Alba   requiere '1' mano  con pincel y '1' mano rodillo		- Venier requiere '2' manos con pincel y '1' con rodillo	"	algoFix registrarPintorDePincel: 'Pablo' conValorHora: 500.	algoFix registrarPintorDePincel: 'Eugenio' conValorHora: 600.	algoFix registrarPintorDeRodillo: 'Tomas' conValorHora: 4000.	venier := algoFix crearPintura: 'Venier' conPrecioPorLitro: 150 manosPincel: 2 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 55 conPintura: venier.		"El descuento del %50 lo hacen los pintores con pincel!!"	valorEsperadoConAlba := algoFix  		manoDeObra: 			(55 "M2" * 2 "horas" * 500 "Precio" * 2 "manos" * 0.5) 		masMateriales: 			(55 "M2" * 4 "litros" * 150 "Precio" * 2 "manos").	self assert: 'Pablo' equals: (presupuesto responsable).	self assert: valorEsperadoConAlba closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTest methodsFor: 'tests' stamp: 'tomas 5/12/2020 17:20'!test01PresupuestoPintorUtilizaPincelConPinturaAlbaOfreceElMenorPresupuesto	| algoFix alba  presupuesto valorEsperado |	algoFix := AlgoFix new.	"Tecnica pincel: 		- Se tarda 2 horas en pintar un M2 (metro cuadrado), 	"	"Consumo de material:		- Para pincel cada M2 lleva 4 litros de pintura	"	"Pinturas:		- Alba   requiere '1' mano con pincel y '1' mano con rodillo	"	algoFix registrarPintorDePincel: 'Diego' conValorHora: 500.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 200 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperado := algoFix		manoDeObra: 			(5 "M2" * 2 "horas" * 500 "Precio" * 1 "manos") 		masMateriales: 			(5 "M2" * 4 "litros" * 200 "Precio" * 1 "manos").	self assert: 'Diego' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTest methodsFor: 'tests' stamp: 'tomas 5/12/2020 17:23'!test05PresupuestoPinteoresConPincelRodilloOfreceElMenorPresupuesto	| algoFix alba presupuesto valorEsperado |	algoFix := AlgoFix new.	"Tecnica pincel: 		- Se tarda '2' horas en pintar un M2 (metro cuadrado), 	"	"Tecnica rodillo:		- Se tarda '1' horas en pintar un M2, 	"	"Consumo de material:		- Para pincel cada M2 lleva '4' litros de pintura		- Para rodillo cada M2 lleval '5 litros de pintura 	"	"Pinturas:		- Alba   requiere '1' mano  con pincel y '1' mano rodillo	"	algoFix registrarPintorDePincel: 'Pablo' conValorHora: 500.	algoFix registrarPintorDeRodillo: 'Edson' conValorHora: 800.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 340 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 20 conPintura: alba.	valorEsperado := algoFix 		manoDeObra: 			(20 "M2" * 2 "horas" * 500 "Precio" * 1 "manos") 		masMateriales: 			(20 "M2" * 4 "litros" * 340 "Precio" * 1 "manos").	self assert: 'Pablo' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTest methodsFor: 'tests' stamp: 'tomas 5/12/2020 17:20'!test03PresupuestoPintorUtilizaRodilloConPinturaAlbaOfreceElMenorPresupuesto	| algoFix alba presupuesto valorEsperado |	algoFix := AlgoFix new.	"Tecnica rodillo:		- Se tarda '1' horas en pintar un M2, 	"	"Consumo de material:		- Para rodillo cada M2 lleval '5 litros de pintura 	"	"Pinturas:		- Alba   requiere '1' mano  con pincel y '1' mano rodillo	"	algoFix registrarPintorDeRodillo: 'Diego' conValorHora: 200.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 200 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperado := algoFix  		manoDeObra: 			(5 "M2" * 1 "horas" * 200 "Precio" * 1 "manos") 		masMateriales: 			(5 "M2" * 5 "litros" * 200 "Precio" * 1 "manos").	self assert: 'Diego' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTest methodsFor: 'tests' stamp: 'tomas 5/12/2020 17:20'!test04PresupuestoPintoresUtilizandoRodilloConPinturaAlbaOfreceElMenorPresupuesto	| algoFix alba presupuesto valorEsperado |	algoFix := AlgoFix new.	"Tecnica rodillo:		- Se tarda '1' horas en pintar un M2, 	"	"Consumo de material:		- Para rodillo cada M2 lleval '5 litros de pintura 	"	"Pinturas:		- Alba   requiere '1' mano  con pincel y '1' mano rodillo	"	algoFix registrarPintorDeRodillo: 'Diego' conValorHora: 200.	algoFix registrarPintorDeRodillo: 'Eugenio' conValorHora: 130.	alba := algoFix crearPintura: 'Alba' conPrecioPorLitro: 20 manosPincel: 1 manosRodillo: 1.	presupuesto := 	algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 5 conPintura: alba.	valorEsperado := algoFix 		manoDeObra: 			(5 "M2" * 1 "horas" * 130 "Precio" * 1 "manos") 		masMateriales: 			(5 "M2" * 5 "litros" * 20 "Precio" * 1 "manos").	self assert: 'Eugenio' equals: (presupuesto responsable).	self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !!AlgoFixTest methodsFor: 'tests' stamp: 'SantiagoLocatelli 5/22/2020 00:15'!test09LoBaratoSaleCaro    | algoFix albalux presupuesto valorEsperado |    algoFix := AlgoFix new.    "Tecnica pincel:         - Se tarda '2' horas en pintar un M2 (metro cuadrado),     "    "Tecnica rodillo:        - Se tarda '1' horas en pintar un M2,     "    "Consumo de material:        - Para pincel cada M2 lleva '4' litros de pintura        - Para rodillo cada M2 lleval '5 litros de pintura     "    "Pinturas:        - Albalux   requiere '10' manos  con pincel y '1' mano rodillo    "    algoFix registrarPintorDePincel: 'Pablo' conValorHora: 200.    algoFix registrarPintorDeRodillo: 'Edson' conValorHora: 800.    albalux := algoFix crearPintura: 'Albalux' conPrecioPorLitro: 340 manosPincel: 10 manosRodillo: 1.    presupuesto :=  algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 20 conPintura: albalux.    valorEsperado := algoFix         manoDeObra:             (20 "M2" * 1 "horas" * 800 "Precio" * 1 "manos")         masMateriales:             (20 "M2" * 5 "litros" * 340 "Precio" * 1 "manos").    self assert: 'Edson' equals: (presupuesto responsable).    self assert: valorEsperado closeTo: (presupuesto valor) precision: precision.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!AlgoFixTest class	instanceVariableNames: 'algoFix'!TestCase subclass: #NoTieneElementosErrorTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!NoTieneElementosErrorTest methodsFor: 'tests' stamp: 'SantiagoLocatelli 5/26/2020 01:03'!test01IntentarPedirPresupuestoMasBaratoTieneQueSalirMal	| algoFix unaPintura |	algoFix := AlgoFix new.	unaPintura := Pintura crearConNombre: 'alba' conPrecioPorLitro: 256 manosDePincel: 1 manosDeRodillo: 2.		self should: [ algoFix presupuestoMasBaratoParaPintarMetrosCuadrados: 20 conPintura: unaPintura ] raise: NoTieneElementosError.! !TestCase subclass: #NumeroInvalidoErrorTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!NumeroInvalidoErrorTest methodsFor: 'tests' stamp: 'SantiagoLocatelli 5/26/2020 00:35'!test03CrearPresupuestoTieneQueExplotar	| presupuesto |		self should: [ presupuesto := Presupuesto conResponsable: 'Nirvana' deValor: -156 ] raise: NumeroInvalidoError. ! !!NumeroInvalidoErrorTest methodsFor: 'tests' stamp: 'SantiagoLocatelli 5/26/2020 17:58'!test07ManosPincelInvalidasTieneQueTirarError	|unaPintura|	 	self should: [unaPintura := Pintura crearConNombre: 'alba' conPrecioPorLitro: 200 manosDePincel: -7 manosDeRodillo: 1] raise: NumeroInvalidoError.! !!NumeroInvalidoErrorTest methodsFor: 'tests' stamp: 'SantiagoLocatelli 5/26/2020 17:57'!test04CrearPinturaTieneQueSalirMal	|unaPintura|	 	self should: [unaPintura := Pintura crearConNombre: 'alba' conPrecioPorLitro: -8 manosDePincel: -1 manosDeRodillo: -7] raise: NumeroInvalidoError.! !!NumeroInvalidoErrorTest methodsFor: 'tests' stamp: 'SantiagoLocatelli 5/26/2020 17:57'!test06ManosRodilloInvalidasTieneQueTirarError	|unaPintura|	 	self should: [unaPintura := Pintura crearConNombre: 'alba' conPrecioPorLitro: 200 manosDePincel: 2 manosDeRodillo: -5] raise: NumeroInvalidoError.! !!NumeroInvalidoErrorTest methodsFor: 'tests' stamp: 'SantiagoLocatelli 5/26/2020 00:28'!test01CrearPintorDePincelTieneQueExplotar	| unPintor |		self should: [unPintor := PintorDePincel conNombre: 'San Miguel' yConValorHora: -1] raise: NumeroInvalidoError.	! !!NumeroInvalidoErrorTest methodsFor: 'tests' stamp: 'SantiagoLocatelli 5/26/2020 00:32'!test02CrearPintorDeRodilloTieneQueExplotar	| unPintor |		self should: [unPintor := PintorDeRodillo conNombre: 'Picasso' yConValorHora: -1] raise: NumeroInvalidoError.! !!NumeroInvalidoErrorTest methodsFor: 'tests' stamp: 'SantiagoLocatelli 5/26/2020 17:57'!test05PrecioInvalidoTieneQueTirarError	|unaPintura|	 	self should: [unaPintura := Pintura crearConNombre: 'alba' conPrecioPorLitro: -150 manosDePincel: 2 manosDeRodillo: 2] raise: NumeroInvalidoError.! !TestCase subclass: #PintorDePincelTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!PintorDePincelTest methodsFor: 'tests' stamp: 'SantiagoLocatelli 5/26/2020 23:59'!test03SeCalculaElCostoPorManoDeObra	| unPintor unaPintura |	unPintor := PintorDePincel conNombre: 'Aguero' yConValorHora: 658464.	unaPintura := Pintura crearConNombre: 'dibujo' conPrecioPorLitro: 2 manosDePincel: 2 manosDeRodillo: 3.	self assert: (20 "M2" * 2 "HorasPorM2" * 658464 "ValorPorHora" * 2 "ManosP" ) equals: (unPintor calcularManoDeObraDe: unaPintura deMetrosCuadrados: 20).! !!PintorDePincelTest methodsFor: 'tests' stamp: 'SantiagoLocatelli 5/26/2020 23:59'!test02SeCalculaElCostoDeMaterialesDeUnaPintura		| unaPintura unPintor |	unPintor := PintorDePincel conNombre: 'Carlos' yConValorHora: 150.	unaPintura := Pintura crearConNombre: 'Venier' conPrecioPorLitro: 302 manosDePincel: 1 manosDeRodillo: 2.		self assert: (20 "M2" * 302 "PrecioPorLitro" * 1 "ManosP" * 4 "LitrosPorM2" ) equals: (unPintor calcularCostoMaterialesDe: unaPintura deMetros: 20).! !!PintorDePincelTest methodsFor: 'tests' stamp: 'SantiagoLocatelli 5/26/2020 22:41'!test06SeCreaElPresupuestoCorrecto		| presupuesto unPintor unaPintura manoDeObra costoMateriales |	unPintor := PintorDePincel conNombre: 'Bad Bunny' yConValorHora: 696.	unaPintura := Pintura crearConNombre: 'Conejo' conPrecioPorLitro: 123  manosDePincel: 2 manosDeRodillo: 4.	manoDeObra := 29 "M2" * 696 "valorPorHra" * 2 "HoraPorM2" * 2 "ManosP".	costoMateriales := 29 "M2" * 4 "litrosPorM2" * 123 "precioPorLitro" * 2 "manosP".	presupuesto := unPintor crearPresupuestoDe: unaPintura deMetrosCuadrados: 29.		self assert: 'Bad Bunny' equals: (presupuesto responsable).	self assert: (manoDeObra + costoMateriales) equals: (presupuesto valor).! !!PintorDePincelTest methodsFor: 'tests' stamp: 'SantiagoLocatelli 5/25/2020 18:24'!test01CrearPintorDePincelSaleBien	| unPintor |	unPintor := PintorDePincel conNombre: 'Gerardo' yConValorHora: 256.		self assert: 'Gerardo' equals: (unPintor getNombre).	self assert: 256 equals: (unPintor getValorPorHora).	self assert: 0.5 equals: (unPintor getDescuento).! !!PintorDePincelTest methodsFor: 'tests' stamp: 'SantiagoLocatelli 5/26/2020 23:59'!test04SeCalculaElCostoPorManoDeObraYSeAplicaElDescuento	| unPintor unaPintura |	unPintor := PintorDePincel conNombre: 'Messi' yConValorHora: 1010.	unaPintura := Pintura crearConNombre: 'La Bola' conPrecioPorLitro: 65 manosDePincel: 2 manosDeRodillo: 3.	self assert: (50 "M2" * 2 "HorasPorM2" * 1010 "ValorPorHora" * 2 "ManosP" * 0.5 "descuento" ) equals: (unPintor calcularManoDeObraDe: unaPintura deMetrosCuadrados: 50).! !!PintorDePincelTest methodsFor: 'tests' stamp: 'SantiagoLocatelli 5/25/2020 17:41'!test05SeCalculaElPresupuestoCorrecto	| unPintor unaPintura manoDeObra costoMateriales |		unPintor := PintorDePincel conNombre: 'El diegote' yConValorHora: 123456.	unaPintura := Pintura crearConNombre: 'alba' conPrecioPorLitro: 1010  manosDePincel: 10 manosDeRodillo: 10.	manoDeObra := 10 "M2" * 123456 "valorPorHra" * 2 "HoraPorM2" * 10 "ManosP".	costoMateriales := 10 "M2" * 4 "litrosPorM2" * 1010 "precioPorLitro" * 10 "manosP".	self assert: (manoDeObra + costoMateriales)	 equals: (unPintor calcularPresupuestoDe: unaPintura deMetrosCuadrados: 10).! !TestCase subclass: #PintorDeRodilloTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!PintorDeRodilloTest methodsFor: 'tests' stamp: 'SantiagoLocatelli 5/25/2020 17:36'!test04SeCalculaElPresupuestoCorrecto	| unPintor unaPintura manoDeObra costoMateriales |		unPintor := PintorDeRodillo conNombre: 'Mascherano' yConValorHora: 565.	unaPintura := Pintura crearConNombre: 'alba' conPrecioPorLitro: 25  manosDePincel: 1 manosDeRodillo: 2.	manoDeObra := 20 "M2" * 565 "valorPorHra" * 1 "HoraPorM2" * 2 "ManosR".	costoMateriales := 20 "M2" * 5 "litrosPorM2" * 25 "precioPorLitro" * 2 "manosR".	self assert: (manoDeObra + costoMateriales)	 equals: (unPintor calcularPresupuestoDe: unaPintura deMetrosCuadrados: 20).! !!PintorDeRodilloTest methodsFor: 'tests' stamp: 'SantiagoLocatelli 5/25/2020 18:23'!test01CrearPintorDeRodilloSaleBien	| unPintor |	unPintor := PintorDeRodillo conNombre: 'Carla' yConValorHora: 582.		self assert: 'Carla' equals: (unPintor getNombre).	self assert: 582 equals: (unPintor getValorPorHora).! !!PintorDeRodilloTest methodsFor: 'tests' stamp: 'SantiagoLocatelli 5/26/2020 23:59'!test02SeCalculaElCostoDeMaterialesDeUnaPintura		| unaPintura unPintor |	unPintor := PintorDeRodillo conNombre: 'German' yConValorHora: 150.	unaPintura := Pintura crearConNombre: 'Alba' conPrecioPorLitro: 302 manosDePincel: 1 manosDeRodillo: 2.		self assert: (20 "M2" * 302 "PrecioPorLitro" * 2 "ManosP" * 5 "LitrosPorM2" ) equals: (unPintor calcularCostoMaterialesDe: unaPintura deMetros: 20).! !!PintorDeRodilloTest methodsFor: 'tests' stamp: 'SantiagoLocatelli 5/26/2020 22:41'!test05SeCreaElPresupuestoCorrecto		| presupuesto unPintor unaPintura manoDeObra costoMateriales |	unPintor := PintorDeRodillo conNombre: 'La Rosalia' yConValorHora: 542.	unaPintura := Pintura crearConNombre: 'Altura' conPrecioPorLitro: 852  manosDePincel: 1 manosDeRodillo: 4.	manoDeObra := 100 "M2" * 542 "valorPorHra" * 1 "HoraPorM2" * 4 "ManosR".	costoMateriales := 100 "M2" * 5 "litrosPorM2" * 852 "precioPorLitro" * 4 "manosR".	presupuesto := unPintor crearPresupuestoDe: unaPintura deMetrosCuadrados: 100.		self assert: 'La Rosalia' equals: (presupuesto responsable).	self assert: (manoDeObra + costoMateriales) equals: (presupuesto valor).! !!PintorDeRodilloTest methodsFor: 'tests' stamp: 'SantiagoLocatelli 5/26/2020 23:59'!test03SeCalculaElCostoPorManoDeObraDePintorDeRodillo	| unPintor unaPintura |	unPintor := PintorDeRodillo conNombre: 'Higuan' yConValorHora: 987.	unaPintura := Pintura crearConNombre: 'alba' conPrecioPorLitro: 856 manosDePincel: 2 manosDeRodillo: 3.	self assert: (41 "M2" * 1 "HorasPorM2" * 987 "ValorPorHora" * 3 "ManosR" ) equals: (unPintor calcularManoDeObraDe: unaPintura deMetrosCuadrados: 41).! !TestCase subclass: #PinturaTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!PinturaTest methodsFor: 'tests' stamp: 'SantiagoLocatelli 5/24/2020 16:52'!test03SeCalculoElCostoConRodilloCorrecto	| unaPintura resultado |		unaPintura := Pintura crearConNombre: 'alba' conPrecioPorLitro: 222 manosDePincel: 1 manosDeRodillo: 3.	resultado := (52 * 5 * 222 * 3).		self assert: resultado equals: (unaPintura calcularCostoMaterialesConRodillo: 52 conLitrosPorMetros: 5). ! !!PinturaTest methodsFor: 'tests' stamp: 'SantiagoLocatelli 5/24/2020 17:01'!test05LosCostosTienenQueSerIguales	| unaPintura |		unaPintura := Pintura crearConNombre: 'alba' conPrecioPorLitro: 222 manosDePincel: 2 manosDeRodillo: 2.		self assert: (unaPintura calcularCostoMaterialesConPincel: 52 conLitrosPorMetros: 5) equals: (unaPintura calcularCostoMaterialesConRodillo: 52 conLitrosPorMetros: 5). ! !!PinturaTest methodsFor: 'tests' stamp: 'SantiagoLocatelli 5/24/2020 16:57'!test04LosCostosDeMaterialesTienenQueSerDiferentes	| unaPintura |		unaPintura := Pintura crearConNombre: 'alba' conPrecioPorLitro: 222 manosDePincel: 2 manosDeRodillo: 2.		self deny: (unaPintura calcularCostoMaterialesConPincel: 52 conLitrosPorMetros: 4) equals: (unaPintura calcularCostoMaterialesConRodillo: 52 conLitrosPorMetros: 5). ! !!PinturaTest methodsFor: 'tests' stamp: 'SantiagoLocatelli 5/24/2020 16:48'!test02SeCalculoElCostoConPincelCorrecto	| unaPintura resultado |		unaPintura := Pintura crearConNombre: 'alba' conPrecioPorLitro: 222 manosDePincel: 1 manosDeRodillo: 1.	resultado := (20 * 4 * 222 * 1).		self assert: resultado equals: (unaPintura calcularCostoMaterialesConPincel: 20 conLitrosPorMetros: 4). ! !!PinturaTest methodsFor: 'tests' stamp: 'SantiagoLocatelli 5/22/2020 01:02'!test01CrearPinturaSaleBien 	|unaPintura|	unaPintura := Pintura crearConNombre: 'alba' conPrecioPorLitro: 320 manosDePincel: 1 manosDeRodillo: 2. 		self assert: 'alba' equals: (unaPintura getNombre).	self assert: 320 equals: (unaPintura getPrecioPorLitro).	self assert: 1 equals: (unaPintura getManosPincel).	self assert: 2 equals: (unaPintura getManosRodillo).! !TestCase subclass: #PresupuestoTest	instanceVariableNames: ''	classVariableNames: ''	package: 'TP1-Tests'!!PresupuestoTest methodsFor: 'tests' stamp: 'SantiagoLocatelli 5/25/2020 17:52'!test01SeCreaElPresupuestoCorrectamente	| presupuesto |	presupuesto := Presupuesto conResponsable: 'Menem' deValor: 123456789. 		self assert: 'Menem' equals: (presupuesto responsable).	self assert: 123456789 equals: (presupuesto valor).! !